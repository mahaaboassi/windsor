import { useEffect, useRef, useState, type ReactNode } from "react"
import { motion, AnimatePresence } from "framer-motion";
import type React from "react"
import { Link, NavLink } from "react-router-dom"
import { categories } from "../data"
// Images 
import img_1 from "../assets/images/slide_1.png"
import img_2 from "../assets/images/slide_2.png"
import img_3 from "../assets/images/slide_3.png"
const data = [ img_1, img_2, img_3]
type ItemMenu = {
    name: string,
    link: string,
    hasChildern?:boolean
}
const menu: ItemMenu[] = [{name: 'Home', link: '/'}, {name: 'Services', link: '/',hasChildern:true},{name: 'About', link: '/about'}, {name: 'Contact', link: '/contact'}]
type ItemContact = {
    svg: ReactNode,
    name: string,
    value: string,
    link: string
}
const contact: ItemContact[] = [{
        svg: <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path fillRule="evenodd" clipRule="evenodd" d="M12 0C14.3734 0 16.6934 0.703788 18.6668 2.02236C20.6402 3.34094 22.1783 5.21508 23.0865 7.4078C23.9948 9.60051 24.2324 12.0133 23.7694 14.3411C23.3064 16.6689 22.1635 18.807 20.4853 20.4853C18.807 22.1635 16.6689 23.3064 14.3411 23.7694C12.0133 24.2324 9.60051 23.9948 7.4078 23.0865C5.21508 22.1783 3.34094 20.6402 2.02236 18.6668C0.703788 16.6934 0 14.3734 0 12C0 8.8174 1.26428 5.76515 3.51472 3.51472C5.76515 1.26428 8.8174 0 12 0ZM10.3359 5.96094H11.8027C11.9321 5.96145 12.056 6.01306 12.1474 6.10452C12.2389 6.19598 12.2905 6.31988 12.291 6.44922V12.1094H17.4492C17.5786 12.1099 17.7025 12.1615 17.7939 12.253C17.8854 12.3444 17.937 12.4683 17.9375 12.5977V14.0625C17.937 14.1918 17.8854 14.3157 17.7939 14.4072C17.7025 14.4987 17.5786 14.5503 17.4492 14.5508H9.8457V6.44531C9.84622 6.31563 9.8981 6.19144 9.98998 6.09993C10.0819 6.00841 10.2063 5.95703 10.3359 5.95703V5.96094Z" fill="#A6CE38"/>
            </svg>,
        name: "",
        value: "Mon-Fri 9:00 am - 6:00 pm",
        link: ""
    },{
        svg: <svg xmlns="http://www.w3.org/2000/svg" width="26" height="24" viewBox="0 0 26 24" fill="none">
            <path d="M4.67383 2C4.78171 2 4.86793 2.02244 4.91895 2.04492L4.93262 2.05078L4.94531 2.05664C4.97805 2.07057 4.99285 2.08055 4.99609 2.08301L5.00195 2.08887L5.01562 2.1084L8.03613 6.03223L8.04102 6.03711L8.04492 6.04297C8.13564 6.1591 8.19772 6.25489 8.24219 6.33008C8.17894 6.40636 8.09002 6.50359 7.9668 6.61719L7.95215 6.63086L7.93848 6.64355L6.94922 7.5918C6.39899 8.11305 6.12412 8.79785 6.12402 9.51562C6.12402 9.81741 6.16932 10.0792 6.2334 10.3154L6.26465 10.4326L6.31055 10.5459C6.34839 10.6389 6.38616 10.721 6.40039 10.752L6.4502 10.8887L6.5459 11.0508C6.88424 11.6225 7.39577 12.2574 8.00488 12.9209L8.02051 12.9365C8.6279 13.5834 9.28284 14.2509 9.99707 14.9219L10.0244 14.9473C10.7441 15.5983 11.4603 16.2214 12.2031 16.8027L12.2061 16.8047C12.9442 17.3804 13.6254 17.8308 14.2383 18.1299L14.3291 18.1738L14.4238 18.209V18.208C14.429 18.2102 14.4354 18.214 14.4443 18.2178C14.4766 18.2314 14.5432 18.2596 14.6152 18.2881L14.6553 18.3037L14.6963 18.3184C15.0754 18.4494 15.4171 18.4756 15.6758 18.4756C16.3994 18.4755 17.0464 18.2141 17.5537 17.751L17.5547 17.752L18.5449 16.8516L18.5547 16.8428C18.7943 16.6219 18.9428 16.5309 19.0029 16.502L19.0596 16.4756L19.0908 16.457C19.1052 16.4611 19.125 16.4664 19.1494 16.4756C19.2438 16.5112 19.3676 16.5683 19.5293 16.6611L19.7041 16.7666L23.9805 19.5654L23.9902 19.5723L23.9971 19.5762C23.9984 19.5836 24 19.5891 24 19.5957C24 19.7004 23.976 19.8332 23.8945 19.9922C23.7627 20.2494 23.5944 20.4904 23.3643 20.7246C22.912 21.184 22.4489 21.4834 21.9473 21.6729L21.9365 21.6768C21.3955 21.8845 20.7936 22 20.1152 22C19.078 22 17.9069 21.7753 16.6016 21.2627C15.2508 20.7322 13.8809 20.0096 12.5059 19.0869C11.0974 18.1384 9.76134 17.0882 8.48438 15.9238C7.21712 14.7445 6.07804 13.5143 5.06543 12.2334H5.06641C4.19828 11.121 3.49844 10.035 2.96973 8.9834L2.75391 8.53516C2.22606 7.37792 2.00004 6.35523 2 5.44824C2 4.89097 2.10632 4.38367 2.30371 3.92871L2.30859 3.91699C2.49118 3.4894 2.79423 3.05866 3.27832 2.6377L3.29395 2.62305L3.30957 2.60938C3.82821 2.13882 4.275 2.00004 4.67383 2Z" stroke="#A6CE38" strokeWidth="4" strokeMiterlimit="10"/>
            </svg>,
        name: "",
        value: "(02) 4571 2720",
        link: "tel:0245712720"
    },{
        svg: <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none">
            <path d="M16.0007 14.81L28.7807 6.6C28.2669 6.21461 27.643 6.0043 27.0007 6H5.0007C4.35844 6.0043 3.73451 6.21461 3.2207 6.6L16.0007 14.81Z" fill="#A6CE38"/>
            <path d="M16.54 16.8403L16.37 16.9203H16.29C16.1979 16.9614 16.1001 16.9884 16 17.0003C15.917 17.0107 15.833 17.0107 15.75 17.0003H15.67L15.5 16.9203L2.1 8.26025C2.03598 8.50179 2.00238 8.75039 2 9.00025V23.0003C2 23.7959 2.31607 24.559 2.87868 25.1216C3.44129 25.6842 4.20435 26.0003 5 26.0003H27C27.7956 26.0003 28.5587 25.6842 29.1213 25.1216C29.6839 24.559 30 23.7959 30 23.0003V9.00025C29.9976 8.75039 29.964 8.50179 29.9 8.26025L16.54 16.8403Z" fill="#A6CE38"/>
            </svg>,
        name: "",
        value: "reception@windsordentalcare.com.au",
        link: "mailto:reception@windsordentalcare.com.au"
    }]
const Navbar: React.FC = () => {
    const [ isOpen, setIsOpen ] = useState<Boolean>(false)
    const [ openServices, setOpenServices ] = useState<Boolean>(false)
    const menuRef = useRef<HTMLUListElement>(null); 
    useEffect(() => {
        const handleClickOutside = (event:MouseEvent) => {
        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
            setIsOpen(false);
        }
        };
        if (isOpen) {
        document.addEventListener("mousedown", handleClickOutside);
        } else {
        document.removeEventListener("mousedown", handleClickOutside);
        }

        return () => {
        document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isOpen]);
    const [dataIndex, setDataIndex] = useState(0);

    useEffect(() => {
    const intervalId = setInterval(() => {
        setDataIndex(prev => (prev + 1) % data.length); 
    }, 4000); 
    return () => clearInterval(intervalId);
    }, []);
    const ref = useRef<HTMLDivElement | null>(null); 
    const [activeIndex, setActiveIndex] = useState<number | null>(null)

    const toggleAccordion = (index: number) => {
        setActiveIndex(activeIndex === index ? null : index)
    }
    return (
      <nav ref={menuRef} className="flex">
        <div className="element-shape fixed left-0 flex items-center container-layout-left">
            <Link to="/">
            <svg className="logo" xmlns="http://www.w3.org/2000/svg" width="133" height="86" viewBox="0 0 133 86" fill="none">
                <path d="M83.2709 48.7411C83.6936 48.5105 84.1163 48.4336 84.5389 48.3568C85.9223 48.0878 87.2672 48.1647 88.6121 48.5105C91.9167 49.279 94.6066 51.085 96.8353 53.5827C97.7959 54.6971 98.6029 55.9267 99.2561 57.2332C100.294 59.3466 101.139 61.5369 101.984 63.7272C102.676 65.5332 103.406 67.3392 104.136 69.1068C104.713 70.4518 105.366 71.7198 106.211 72.911C106.749 73.6795 107.364 74.3712 108.209 74.7939C108.978 75.1781 109.746 75.1397 110.515 74.7939C111.399 74.3712 112.052 73.718 112.667 73.0263C113.704 71.7967 114.511 70.4517 115.28 69.03C116.971 65.8791 118.315 62.5744 119.507 59.1929C120.621 56.1188 121.543 53.0063 122.389 49.8554C123.08 47.2809 123.657 44.6679 124.156 42.0549C124.656 39.5572 125.002 37.0595 125.232 34.5234C125.463 31.872 125.54 29.2591 125.347 26.6077C125.232 24.7632 124.925 22.9572 124.425 21.1896C123.964 19.5373 123.311 18.0002 122.35 16.5785C120.813 14.3498 118.738 12.928 116.125 12.2748C114.627 11.8905 113.089 11.7752 111.552 11.8521C109.67 11.9289 107.787 12.0826 105.904 12.2748C104.405 12.4285 102.907 12.6206 101.37 12.7359C100.255 12.8511 99.1408 12.8896 98.0265 12.8896C96.8737 12.8896 95.6825 12.8511 94.5297 12.7743C93.3001 12.6974 92.0704 12.4669 90.8408 12.1979C89.3806 11.8521 87.9204 11.4294 86.5371 10.853C84.1931 9.89234 82.1565 8.509 80.5811 6.51085C79.5436 5.24279 78.775 3.7826 78.1986 2.24556C77.9681 1.66917 77.776 1.05436 77.5838 0.477965C77.5454 0.401113 77.5454 0.324262 77.6223 0.208984C78.0834 0.593245 78.5829 0.977505 79.044 1.36177C79.6973 1.93816 80.3121 2.51455 80.9653 3.09094C82.0028 4.01316 83.194 4.82011 84.4237 5.47335C86.1913 6.434 88.0741 7.12567 90.0723 7.4715C92.2626 7.81733 94.4529 7.89419 96.6431 7.77891C98.5644 7.66363 100.447 7.4715 102.33 7.16409C104.789 6.77983 107.21 6.35715 109.67 5.93446C111.437 5.62705 113.205 5.35807 114.972 5.08909C116.817 4.78168 118.661 4.62797 120.506 4.55112C122.158 4.47427 123.81 4.55112 125.424 4.78168C126.577 4.93538 127.73 5.24279 128.767 5.78076C130.151 6.47243 131.073 7.54835 131.688 8.93169C132.149 10.0076 132.379 11.122 132.571 12.2748C132.84 13.9271 132.956 15.6178 132.994 17.3086C133.033 19.9215 132.879 22.4961 132.61 25.109C132.303 28.1063 131.88 31.1035 131.38 34.1007C130.919 36.9443 130.343 39.7494 129.766 42.5545C128.959 46.3586 128.076 50.1244 127.038 53.8901C126.116 57.1948 125.155 60.461 124.079 63.6888C122.965 66.955 121.735 70.1828 120.314 73.3721C119.161 75.8698 117.931 78.3291 116.317 80.5578C115.318 81.9796 114.204 83.3245 112.821 84.362C111.937 85.0152 110.976 85.4763 109.9 85.63C109.055 85.7453 108.248 85.5916 107.441 85.2842C106.519 84.8999 105.712 84.3235 105.02 83.555C104.444 82.9018 103.983 82.1717 103.598 81.4032C102.638 79.5587 101.831 77.6374 101.139 75.6777C100.14 72.911 99.2945 70.1443 98.4492 67.3392C97.6806 64.8031 96.9121 62.267 95.8362 59.8077C94.9908 57.848 94.0302 56.0036 92.7237 54.3128C91.4172 52.5837 89.8033 51.1619 87.8436 50.2012C86.8829 49.7401 85.9607 49.279 84.9232 49.01C84.3852 48.8948 83.8473 48.8179 83.2709 48.7411Z" fill="white"/>
                <path d="M51.7971 22.2261C51.7971 22.1108 51.7587 22.034 51.7587 21.9187C51.6819 19.4979 51.6434 17.077 51.874 14.6562C52.0277 12.8886 52.3351 11.121 52.9115 9.43025C53.3342 8.20061 53.8722 7.04783 54.7175 6.04876C55.6782 4.89598 56.8694 4.12745 58.3296 3.78162C59.5208 3.47421 60.7504 3.47421 61.98 3.58949C63.7861 3.78162 65.5152 4.24273 67.206 4.85755C69.9342 5.77978 72.5472 6.97098 75.1217 8.23904C77.8116 9.58395 80.5014 11.0057 83.1912 12.3891C85.612 13.6187 88.0713 14.8483 90.6074 15.8858C92.9514 16.8849 95.3723 17.6918 97.8699 18.2298C100.06 18.7293 102.289 18.9215 104.556 18.8062C106.247 18.7293 107.861 18.3067 109.398 17.5766C110.282 17.1539 111.165 16.8465 112.049 16.4622C112.126 16.4238 112.241 16.4238 112.433 16.3469C112.28 16.6928 112.164 16.9233 112.011 17.1539C111.242 18.4219 110.166 19.3826 108.86 20.0743C107.284 20.9581 105.555 21.4192 103.788 21.6497C101.597 21.9571 99.407 21.9187 97.2167 21.6113C95.0264 21.3039 92.913 20.7659 90.7996 20.1511C87.7255 19.2289 84.7282 18.0761 81.731 17.0002C79.2718 16.1164 76.7741 15.2326 74.2764 14.4256C72.3166 13.8108 70.3185 13.3881 68.2435 13.3497C67.1676 13.3497 66.0916 13.465 65.0926 13.9261C64.0935 14.3488 63.2481 15.0404 62.6717 15.9627C61.9416 17.077 61.5189 18.3067 61.3268 19.6131C61.2115 20.3817 61.1347 21.1502 61.0578 21.9187C61.0194 22.2645 61.0194 22.2645 60.6736 22.2645C57.7916 22.2645 54.9097 22.2261 52.0277 22.2261C51.9893 22.2645 51.9124 22.2261 51.7971 22.2261Z" fill="white"/>
                <path d="M100.752 54.5433C101.059 54.5048 101.328 54.4664 101.636 54.5048C102.212 54.5433 102.75 54.6585 103.288 54.8123C104.71 55.2734 106.016 55.9266 107.323 56.6183C107.899 56.9257 108.514 57.1562 109.167 57.2715C109.859 57.3868 110.474 57.2715 111.05 56.8104C112.011 56.0419 112.818 55.1197 113.509 54.1206C114.662 52.4298 115.546 50.6238 116.276 48.7409C117.275 46.2048 118.005 43.5919 118.543 40.9405C118.889 39.2497 119.158 37.559 119.389 35.8682C119.696 33.1016 119.85 30.3349 119.734 27.5298C119.619 25.2626 119.35 22.9955 118.774 20.8052C118.543 19.883 118.236 18.9992 117.852 18.1154C117.813 18.0001 117.736 17.8464 117.659 17.6543C118.044 17.7311 118.39 17.808 118.697 17.9617C119.927 18.4997 120.772 19.4603 121.387 20.6131C122.194 22.1501 122.616 23.8025 122.808 25.5316C123.193 28.452 123.116 31.3724 122.847 34.3312C122.693 36.0604 122.463 37.7895 122.155 39.5187C121.848 41.2479 121.54 43.0155 121.156 44.7446C120.311 48.4335 119.273 52.084 118.044 55.6576C116.968 58.8086 115.738 61.8826 114.355 64.9183C113.817 66.1095 113.202 67.2623 112.626 68.4535C112.241 69.1836 111.742 69.7984 111.012 70.2211C110.589 70.4901 110.128 70.6438 109.628 70.6053C109.283 70.5669 108.975 70.4132 108.821 70.1058C108.629 69.76 108.476 69.3757 108.322 69.0299C107.054 66.3401 105.824 63.6118 104.556 60.9604C103.711 59.2312 102.827 57.5021 101.713 55.9266C101.52 55.6576 101.328 55.4271 101.098 55.1581C100.983 55.0044 100.867 54.8891 100.752 54.7738C100.752 54.6201 100.752 54.5817 100.752 54.5433Z" fill="white"/>
                <path d="M60.9824 63.1122C61.1746 63.1122 61.2898 63.1122 61.4051 63.1122C63.4033 63.1122 65.4398 63.1122 67.438 63.1122C67.8222 63.1122 67.8607 63.1122 67.9375 63.4964C68.3218 64.995 68.8598 66.4936 69.4746 67.9154C70.2047 69.683 71.05 71.3738 72.2028 72.9492C72.6639 73.6025 73.2403 74.1404 73.8936 74.64C75.0848 75.4853 76.3913 75.3316 77.4288 74.1404C77.9667 73.5256 78.4278 72.8339 78.7352 72.0654C79.3885 70.49 80.0417 68.9529 80.6565 67.3774C81.4251 65.4561 82.2704 63.6117 83.2695 61.8057C84.1149 60.3455 85.1524 59.0006 86.5357 58.0015C87.8038 57.0793 89.2255 56.6182 90.7626 56.6182C90.8394 56.6182 90.8779 56.6182 90.9547 56.6182C90.9931 56.6182 90.9931 56.6566 91.0316 56.6566C90.9931 56.695 90.9547 56.7334 90.8779 56.7719C89.3024 57.2714 88.1496 58.3089 87.1505 59.577C86.2283 60.8066 85.5751 62.1515 84.9987 63.5733C84.2686 65.3793 83.6922 67.2237 83.1927 69.1066C82.5394 71.5275 81.8862 73.9483 81.1561 76.3307C80.6565 77.983 80.0417 79.5969 79.1579 81.0955C78.6968 81.8641 78.1588 82.5557 77.4288 83.0937C76.5834 83.7469 75.6227 84.0543 74.5084 83.8622C73.394 83.6701 72.4334 83.1321 71.5496 82.4404C70.4352 81.5951 69.513 80.5576 68.6292 79.4816C67.0922 77.5603 65.9009 75.4085 64.7866 73.2182C63.9412 71.5659 63.0959 69.9136 62.4042 68.1844C61.9431 67.0316 61.482 65.8788 61.1746 64.6876C61.1746 64.1881 61.0977 63.6885 60.9824 63.1122Z" fill="white"/>
                <path d="M5.03381 43.3227L0 27.9907H3.6889L8.06946 41.5935H6.22502L10.7977 27.9907H14.1024L18.4829 41.5935H16.7153L21.1727 27.9907H24.5542L19.5204 43.3227H15.7163L11.8352 31.4106H12.8343L8.83799 43.3227H5.03381Z" fill="white"/>
                <path d="M26.5137 43.3227V27.9907H30.0489V43.3227H26.5137Z" fill="white"/>
                <path d="M33.6992 43.3227V27.9907H36.6196L45.6881 39.0574H44.2664V27.9907H47.7631V43.3227H44.8428L35.7742 32.256H37.196V43.3227H33.6992Z" fill="white"/>
                <path d="M51.4141 43.3227V27.9907H58.3692C60.0215 27.9907 61.5201 28.2981 62.7882 28.9514C64.0562 29.6046 65.0553 30.4884 65.7854 31.6028C66.5155 32.7555 66.8613 34.1005 66.8613 35.6759C66.8613 37.213 66.5155 38.5579 65.7854 39.7107C65.0553 40.8634 64.0562 41.7472 62.7882 42.4005C61.5201 43.0537 60.0599 43.3611 58.3692 43.3611H51.4141V43.3227ZM54.9877 40.4023H58.2155C59.253 40.4023 60.1368 40.2102 60.8669 39.8259C61.6354 39.4417 62.2118 38.9037 62.6345 38.1736C63.0571 37.4435 63.2493 36.5981 63.2493 35.6375C63.2493 34.6768 63.0571 33.8315 62.6345 33.1014C62.2118 32.4097 61.6354 31.8333 60.8669 31.4491C60.0983 31.0648 59.2145 30.8727 58.2155 30.8727H54.9877V40.4023Z" fill="white"/>
                <path d="M74.5877 43.5921C73.358 43.5921 72.1668 43.4384 71.0525 43.0925C69.9381 42.7467 69.0159 42.324 68.3242 41.8245L69.5154 39.1347C70.1687 39.5958 70.9372 39.98 71.8594 40.2874C72.7432 40.5948 73.6654 40.7485 74.5877 40.7485C75.2793 40.7485 75.8557 40.6717 76.2784 40.5564C76.7011 40.4027 77.0085 40.2106 77.239 39.98C77.4312 39.7495 77.5465 39.4421 77.5465 39.1347C77.5465 38.712 77.3928 38.4046 77.0469 38.174C76.7395 37.9434 76.3168 37.7513 75.7789 37.5976C75.2409 37.4439 74.6645 37.2902 74.0497 37.1749C73.3965 37.0212 72.7816 36.8675 72.1284 36.6754C71.4752 36.4833 70.8988 36.2143 70.3992 35.8684C69.8613 35.561 69.4386 35.1383 69.1312 34.6004C68.7853 34.0624 68.6316 33.4092 68.6316 32.6022C68.6316 31.7184 68.8622 30.9115 69.3617 30.2198C69.8228 29.4897 70.5529 28.9133 71.5136 28.4906C72.4742 28.068 73.6654 27.8374 75.1256 27.8374C76.0863 27.8374 77.0469 27.9527 77.9692 28.1832C78.8914 28.4138 79.7367 28.7596 80.4284 29.2207L79.3141 31.9106C78.584 31.4879 77.8923 31.1805 77.1622 30.9883C76.4321 30.7962 75.7404 30.6809 75.0488 30.6809C74.3571 30.6809 73.7807 30.7578 73.358 30.9115C72.9353 31.0652 72.5895 31.2957 72.3974 31.5263C72.2052 31.7953 72.1284 32.0643 72.1284 32.4101C72.1284 32.7944 72.2821 33.1402 72.6279 33.3708C72.9353 33.6013 73.358 33.7934 73.896 33.9471C74.434 34.1008 75.0103 34.2545 75.6252 34.3698C76.2784 34.5235 76.8932 34.6772 77.5465 34.8694C78.1997 35.0615 78.7761 35.3305 79.2756 35.6379C79.8136 35.9453 80.2363 36.368 80.5437 36.9059C80.8895 37.4439 81.0432 38.0972 81.0432 38.9041C81.0432 39.7495 80.8127 40.5564 80.3131 41.2865C79.8136 42.0166 79.1219 42.593 78.1613 43.0157C77.2391 43.3615 76.0478 43.5921 74.5877 43.5921Z" fill="white"/>
                <path d="M90.9947 43.5918C89.7651 43.5918 88.6507 43.3996 87.6132 43.0154C86.5757 42.6311 85.6919 42.0547 84.9234 41.3631C84.1549 40.633 83.5785 39.7876 83.1558 38.827C82.7331 37.8663 82.541 36.8288 82.541 35.676C82.541 34.5232 82.7331 33.4857 83.1558 32.5251C83.5785 31.5644 84.1549 30.7191 84.9234 29.989C85.6919 29.2589 86.5757 28.7209 87.6132 28.3366C88.6507 27.9524 89.7651 27.7603 90.9563 27.7603C92.1859 27.7603 93.3003 27.9524 94.2994 28.3366C95.2985 28.7209 96.1822 29.2973 96.9508 29.989C97.7193 30.7191 98.2957 31.526 98.7184 32.4867C99.1411 33.4473 99.3716 34.4848 99.3716 35.6376C99.3716 36.7904 99.1411 37.8279 98.7184 38.7885C98.2957 39.7492 97.7193 40.5945 96.9508 41.3246C96.1822 42.0163 95.2985 42.5927 94.2994 42.977C93.3003 43.3996 92.1859 43.5918 90.9947 43.5918ZM90.9563 40.5561C91.648 40.5561 92.2628 40.4408 92.8392 40.2103C93.4156 39.9797 93.9151 39.6339 94.3762 39.2112C94.7989 38.7885 95.1447 38.2506 95.4137 37.6357C95.6443 37.0209 95.7596 36.3677 95.7596 35.6376C95.7596 34.9075 95.6443 34.2543 95.4137 33.6394C95.1832 33.0246 94.8373 32.5251 94.4147 32.064C93.992 31.6413 93.4924 31.2955 92.8776 31.0649C92.3012 30.8343 91.648 30.7191 90.9563 30.7191C90.2646 30.7191 89.6498 30.8343 89.0734 31.0649C88.497 31.2955 87.9975 31.6413 87.5364 32.064C87.1137 32.4867 86.7679 33.0246 86.4989 33.6394C86.2683 34.2543 86.1531 34.9075 86.1531 35.6376C86.1531 36.3677 86.2683 37.0209 86.4989 37.6357C86.7294 38.2506 87.0753 38.7501 87.498 39.2112C87.9207 39.6339 88.4202 39.9797 89.035 40.2103C89.6498 40.4408 90.2646 40.5561 90.9563 40.5561Z" fill="white"/>
                <path d="M102.021 43.3227V27.9907H108.669C110.053 27.9907 111.244 28.2213 112.204 28.644C113.203 29.1051 113.972 29.7199 114.51 30.5653C115.048 31.4106 115.317 32.4097 115.317 33.5625C115.317 34.7153 115.048 35.6759 114.51 36.5213C113.972 37.3282 113.203 37.9815 112.204 38.4042C111.205 38.8269 110.014 39.0574 108.669 39.0574H104.02L105.595 37.4819V43.3227H102.021ZM105.595 37.9046L104.02 36.2139H108.477C109.591 36.2139 110.398 35.9833 110.936 35.4838C111.474 35.0227 111.743 34.3694 111.743 33.5241C111.743 32.6787 111.474 32.0255 110.936 31.5643C110.398 31.1032 109.591 30.8727 108.477 30.8727H104.02L105.595 29.1819V37.9046ZM111.782 43.3227L107.939 37.7509H111.743L115.624 43.3227H111.782Z" fill="white"/>
                <path d="M0.498047 57.8093V47.7417H5.07074C6.14667 47.7417 7.10732 47.9338 7.95269 48.3565C8.79806 48.7792 9.45131 49.3556 9.91242 50.0857C10.3735 50.8158 10.6041 51.6996 10.6041 52.7371C10.6041 53.7362 10.3735 54.62 9.91242 55.3885C9.45131 56.157 8.79806 56.7334 7.95269 57.1561C7.10732 57.5788 6.14667 57.7709 5.07074 57.7709H0.498047V57.8093ZM2.84204 55.888H4.95547C5.60871 55.888 6.22353 55.7727 6.68464 55.5038C7.18418 55.2348 7.56844 54.8889 7.83742 54.4278C8.1064 53.9667 8.2601 53.4288 8.2601 52.7755C8.2601 52.1223 8.1064 51.5843 7.83742 51.1232C7.56844 50.6621 7.18418 50.3162 6.68464 50.0473C6.1851 49.7783 5.60871 49.663 4.95547 49.663H2.84204V55.888Z" fill="white"/>
                <path d="M16.0251 57.9244C15.1413 57.9244 14.3728 57.7707 13.7195 57.4249C13.0663 57.079 12.5283 56.6179 12.1825 56.0031C11.8367 55.3883 11.6445 54.735 11.6445 53.9665C11.6445 53.198 11.8367 52.5063 12.1825 51.8915C12.5283 51.2767 13.0279 50.8156 13.6427 50.4698C14.2575 50.1239 14.9492 49.9702 15.7561 49.9702C16.5246 49.9702 17.1779 50.1239 17.7927 50.4313C18.4075 50.7387 18.8686 51.1998 19.2529 51.8147C19.5987 52.4295 19.7908 53.1211 19.7908 53.9665C19.7908 54.0434 19.7908 54.1587 19.7908 54.2739C19.7908 54.3892 19.7908 54.5045 19.7524 54.5813H13.489V53.2748H18.5612L17.7158 53.6591C17.7158 53.2748 17.639 52.8906 17.4853 52.6216C17.3316 52.3142 17.101 52.0836 16.7936 51.9299C16.5246 51.7762 16.1788 51.661 15.7945 51.661C15.4103 51.661 15.0644 51.7378 14.7955 51.9299C14.488 52.0836 14.2575 52.3142 14.1038 52.6216C13.9501 52.929 13.8732 53.2749 13.8732 53.6975V54.0434C13.8732 54.4661 13.9501 54.8503 14.1422 55.1577C14.3344 55.4651 14.6033 55.7341 14.9492 55.8878C15.295 56.0415 15.6793 56.1568 16.1404 56.1568C16.5631 56.1568 16.9089 56.0799 17.2163 55.9647C17.5237 55.8494 17.7927 55.6573 18.0617 55.3883L19.2529 56.6948C18.907 57.079 18.4459 57.3864 17.908 57.617C17.3316 57.8091 16.7168 57.9244 16.0251 57.9244Z" fill="white"/>
                <path d="M25.9366 49.9702C26.5515 49.9702 27.0894 50.0855 27.589 50.3545C28.0885 50.585 28.4343 50.9693 28.7418 51.4688C29.0107 51.9684 29.1644 52.6216 29.1644 53.3901V57.8091H26.9357V53.736C26.9357 53.1211 26.782 52.66 26.513 52.3526C26.2441 52.0452 25.8598 51.8915 25.3603 51.8915C25.0144 51.8915 24.707 51.9684 24.3996 52.1221C24.1306 52.2758 23.9001 52.5063 23.7464 52.8137C23.5927 53.1211 23.5158 53.5054 23.5158 54.0049V57.8091H21.2871V50.0855H23.439V52.2373L23.0547 51.5841C23.3237 51.0846 23.7464 50.6619 24.2459 50.3929C24.707 50.1239 25.2834 49.9702 25.9366 49.9702Z" fill="white"/>
                <path d="M30.2422 51.9682V50.239H35.5834V51.9682H30.2422ZM34.3153 57.9242C33.3931 57.9242 32.7015 57.6936 32.2019 57.2325C31.7024 56.7714 31.4334 56.0797 31.4334 55.1575V48.3945H33.6621V55.1191C33.6621 55.4265 33.739 55.6955 33.9311 55.8876C34.0848 56.0797 34.3538 56.1566 34.6228 56.1566C34.9686 56.1566 35.276 56.0797 35.545 55.8876L36.1598 57.4631C35.9292 57.6168 35.6603 57.7321 35.3528 57.8473C35.007 57.8858 34.6612 57.9242 34.3153 57.9242Z" fill="white"/>
                <path d="M39.7706 57.9246C39.1558 57.9246 38.6563 57.8093 38.2336 57.6171C37.8109 57.425 37.4651 57.1176 37.2345 56.7718C37.004 56.4259 36.8887 56.0032 36.8887 55.5806C36.8887 55.1194 37.004 54.7352 37.2345 54.3894C37.4651 54.0435 37.8109 53.7745 38.3104 53.5824C38.81 53.3903 39.4248 53.275 40.2317 53.275H42.2683V54.5815H40.4623C39.9243 54.5815 39.5785 54.6583 39.3864 54.8505C39.1942 55.0042 39.079 55.2347 39.079 55.5037C39.079 55.7727 39.1942 56.0033 39.4248 56.1954C39.6553 56.3491 39.9628 56.4644 40.347 56.4644C40.7313 56.4644 41.0387 56.3875 41.3461 56.1954C41.6535 56.0033 41.8456 55.7727 41.9993 55.4269L42.3452 56.4644C42.1915 56.9639 41.8841 57.3482 41.4614 57.5787C41.0003 57.7708 40.4623 57.9246 39.7706 57.9246ZM42.1146 57.8093V56.3107L41.9609 55.9648V53.275C41.9609 52.8139 41.8072 52.4296 41.5382 52.1606C41.2308 51.8917 40.8081 51.7764 40.1933 51.7764C39.7706 51.7764 39.3864 51.8532 38.9637 51.9685C38.5794 52.0838 38.2336 52.2759 37.9646 52.5065L37.1577 50.931C37.5803 50.6236 38.0799 50.3931 38.6947 50.2393C39.2711 50.0856 39.8859 50.0088 40.5007 50.0088C41.6919 50.0088 42.5757 50.2778 43.229 50.8542C43.8822 51.3921 44.1896 52.2759 44.1896 53.4671V57.8861H42.1146V57.8093Z" fill="white"/>
                <path d="M46.2656 57.8095V47.1655H48.4943V57.8095H46.2656Z" fill="white"/>
                <path d="M59.599 57.8859C58.8305 57.8859 58.1388 57.7706 57.524 57.5016C56.8707 57.2326 56.3328 56.8868 55.8717 56.4257C55.4106 55.9646 55.0263 55.4266 54.7573 54.8118C54.4883 54.197 54.373 53.5053 54.373 52.7752C54.373 52.0451 54.4883 51.3534 54.7573 50.7386C55.0263 50.1238 55.3721 49.5859 55.8717 49.1247C56.3328 48.6636 56.9092 48.3178 57.524 48.0488C58.1772 47.7798 58.8689 47.6646 59.599 47.6646C60.3291 47.6646 61.0208 47.7798 61.6356 48.0488C62.2888 48.2794 62.8268 48.6636 63.2495 49.1632L62.5578 49.8548C62.1351 49.4321 61.674 49.1247 61.2129 48.9326C60.7133 48.7405 60.1754 48.6636 59.599 48.6636C58.9842 48.6636 58.4462 48.7789 57.9082 48.971C57.4087 49.1632 56.9476 49.4706 56.5633 49.8548C56.1791 50.2391 55.8717 50.6618 55.6795 51.1613C55.4874 51.6609 55.3721 52.1988 55.3721 52.8136C55.3721 53.4285 55.4874 53.9664 55.6795 54.466C55.9101 54.9655 56.1791 55.4266 56.5633 55.7724C56.9476 56.1567 57.4087 56.4257 57.9082 56.6562C58.4078 56.8484 58.9842 56.9636 59.599 56.9636C60.1754 56.9636 60.7133 56.8868 61.2129 56.6947C61.7124 56.5025 62.1735 56.1951 62.5578 55.7724L63.2495 56.4641C62.8268 56.9636 62.2504 57.3095 61.6356 57.5785C61.0208 57.7706 60.3291 57.8859 59.599 57.8859Z" fill="white"/>
                <path d="M67.3233 57.886C66.7469 57.886 66.2858 57.8092 65.8631 57.6171C65.4404 57.4249 65.133 57.1559 64.9025 56.8485C64.6719 56.5027 64.5566 56.1569 64.5566 55.6958C64.5566 55.3115 64.6335 54.9657 64.8256 54.6198C65.0178 54.3124 65.3252 54.0434 65.7478 53.8513C66.1705 53.6592 66.7469 53.5439 67.477 53.5439H70.09V54.3124H67.5154C66.7854 54.3124 66.2858 54.4277 66.0168 54.6967C65.7479 54.9657 65.5941 55.2731 65.5941 55.6573C65.5941 56.08 65.7478 56.4258 66.0937 56.6948C66.4395 56.9638 66.9006 57.0791 67.5154 57.0791C68.0918 57.0791 68.5914 56.9638 69.0141 56.6948C69.4367 56.4258 69.7442 56.0416 69.9363 55.5421L70.1668 56.2337C69.9747 56.7333 69.6289 57.1175 69.1678 57.4249C68.6298 57.7323 68.0534 57.886 67.3233 57.886ZM69.9363 57.8092V56.1569L69.8979 55.8879V53.1212C69.8979 52.468 69.7057 52.0069 69.3599 51.661C69.0141 51.3152 68.4761 51.1615 67.746 51.1615C67.2465 51.1615 66.7854 51.2383 66.3627 51.392C65.94 51.5457 65.5557 51.7763 65.2483 52.0453L64.7872 51.2768C65.1715 50.9694 65.6326 50.7004 66.1705 50.5082C66.7085 50.3161 67.2849 50.2393 67.8613 50.2393C68.8219 50.2393 69.5905 50.4698 70.1284 50.9693C70.6664 51.4689 70.9354 52.199 70.9354 53.1596V57.8476H69.9363V57.8092Z" fill="white"/>
                <path d="M73.6621 57.8095V50.278H74.6228V52.3146L74.5075 51.9688C74.6996 51.3924 75.0839 50.9697 75.5834 50.6623C76.0829 50.3549 76.6978 50.2012 77.4279 50.2012V51.2003C77.3894 51.2003 77.351 51.2003 77.3126 51.2003C77.2742 51.2003 77.2357 51.2003 77.1973 51.2003C76.3904 51.2003 75.7755 51.4308 75.3144 51.9303C74.8533 52.4299 74.6228 53.0831 74.6228 54.0054V57.848H73.6621V57.8095Z" fill="white"/>
                <path d="M82.4247 57.886C81.6562 57.886 80.9645 57.7323 80.3497 57.3865C79.7733 57.0407 79.3122 56.618 78.9663 56.0416C78.6205 55.4652 78.4668 54.812 78.4668 54.0434C78.4668 53.3133 78.6205 52.6217 78.9663 52.0837C79.2737 51.5073 79.7349 51.0462 80.2728 50.7388C80.8492 50.393 81.464 50.2393 82.1557 50.2393C82.8474 50.2393 83.5006 50.393 84.0386 50.7388C84.5765 51.0462 85.0376 51.5073 85.3451 52.0837C85.6525 52.6601 85.8062 53.3133 85.8062 54.0819C85.8062 54.1203 85.8062 54.1971 85.8062 54.2356C85.8062 54.274 85.8062 54.3508 85.8062 54.3893H79.2353V53.6207H85.2298L84.8455 53.9282C84.8455 53.3902 84.7302 52.8907 84.4997 52.468C84.2691 52.0453 83.9617 51.6994 83.539 51.4689C83.1548 51.2383 82.6552 51.1231 82.1557 51.1231C81.6562 51.1231 81.1566 51.2383 80.7724 51.4689C80.3497 51.6994 80.0423 52.0453 79.8117 52.468C79.5812 52.8907 79.4659 53.3902 79.4659 53.9282V54.0819C79.4659 54.6583 79.5812 55.1578 79.8501 55.5805C80.1191 56.0032 80.4649 56.349 80.9261 56.5796C81.3872 56.8101 81.8867 56.9638 82.4631 56.9638C82.9242 56.9638 83.3469 56.887 83.7312 56.7333C84.1154 56.5795 84.4613 56.3106 84.7687 56.0032L85.3451 56.6564C84.9992 57.0407 84.5765 57.3481 84.077 57.5786C83.5775 57.7708 83.0395 57.886 82.4247 57.886Z" fill="white"/>
                </svg>
            </Link>
        </div>
        <div className="w-full ">
            <div className="first-nav gap-5 contact-nav container-layout-right">
                {contact.map((item, index) => (
                    item.link == "" ? <div key={index}  className="flex gap-1 items-center contact-nav-item">
                            <span>{item.svg}</span>
                            <div>{item.value}</div>
                        </div>:<Link to={item.link}>
                        <div key={index}  className="flex gap-1 items-center contact-nav-item">
                            <span>{item.svg}</span>
                            <div>{item.value}</div>
                        </div>
                    </Link>
                ))}
                <div>
                    <button className="btn !py-2 lg:!py-3 !text-xs md:!text-sm flex">
                        BOOK <span className=" hidden xs:flex">&nbsp;AN APPOINTMENT</span>
                    </button>
                </div>
            </div>
            <div className="second-nav container-layout-right">
                <div onClick={()=>setIsOpen(!isOpen)} className="cursor-pointer menu-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="41" height="26" viewBox="0 0 71 56" fill="none">
                        <g clipPath="url(#clip0_1598_1335)">
                        <path fillRule="evenodd" clipRule="evenodd" d="M71 0V11.586H19.1829V0H71ZM12.2089 44.414V56H0V44.414H12.2089ZM12.2089 22.207V33.793H0V22.207H12.2089ZM12.2089 0V11.586H0V0H12.2089ZM71 44.414V56H19.1829V44.414H71ZM71 22.207V33.793H19.1829V22.207H71Z" fill="#A6CE38"/>
                        </g>
                        <defs>
                        <clipPath id="clip0_1598_1335">
                        <rect width="71" height="56" fill="white"/>
                        </clipPath>
                        </defs>
                    </svg>
                </div>
                <ul className={`flex sp:items-center gap-3 lg:gap-5 ${isOpen?"open":""}`}>
                    {menu.map((item, index) => (
                        item?.hasChildern ? <li onClick={()=>setOpenServices(true)} onMouseLeave={()=>setOpenServices(false)} onMouseEnter={()=>setOpenServices(true)}
                        className="nav-item items-center sp:flex gap-0.5 cursor-pointer  sp:h-[50px]">
                            {item.name}
                            {item.hasChildern && <div className="hidden sp:flex">
                                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="8" viewBox="0 0 17 10" fill="none">
                                    <path d="M2.27453 0.0605463L8.39453 6.16721L14.5145 0.0605468L16.3945 1.94055L8.39453 9.94055L0.394531 1.94055L2.27453 0.0605463Z" fill="rgb(55, 55, 55)"/>
                                </svg>
                            </div>}
                            <div className="flex sp:hidden flex-col gap-2 mt-2">
                                {
                                    categories.map((e,idx)=>(<div className="flex flex-col gap-2" key={`Root_Menu_${e.category}_${idx}`}>
                                        <div className="flex gap-3 items-center" onClick={() => {toggleAccordion(idx)}}>
                                            
                                            <Link to={e.link}>
                                                <h2 onClick={()=>setIsOpen(false)}  className="text-sm lg:text-lg sp:font-bold border-b border-b-[1px] border-[var(--main)] text-[var(--main)] w-[150px] sp:w-fit">{e.category}</h2>
                                            </Link>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="8" viewBox="0 0 17 10" fill="none">
                                                    <path d="M2.27453 0.0605463L8.39453 6.16721L14.5145 0.0605468L16.3945 1.94055L8.39453 9.94055L0.394531 1.94055L2.27453 0.0605463Z" fill="#A6CE38"/>
                                                </svg>
                                        </div>
                                        
                                        <AnimatePresence mode="sync">
                                            {activeIndex === idx && (
                                            <motion.div
                                                ref={ref}
                                                initial={{ opacity: 0, height: 0 }}
                                                animate={{
                                                opacity: 1,
                                                height: ref.current ? ref.current.scrollHeight : "auto",
                                                }}
                                                exit={{ opacity: 0, height: 0 }}
                                                transition={{ duration: 0.3, ease: "easeInOut" }}
                                                className="overflow-hidden flex flex-col gap-1 pl-4 mt-2"
                                            >
                                                {e.services.map((service, i) => (
                                                <Link
                                                    onClick={()=>setIsOpen(false)}
                                                    key={service.hero.subLabel + i}
                                                    to={`/${service.link}`}
                                                    className="flex items-center gap-2 text-xs lg:text-sm transition-colors hover:text-[var(--grey_1)]"
                                                >
                                                    <div className="w-[6px] h-[6px] rounded-full bg-[var(--main)]"></div>
                                                    {service.hero.subLabel}uu
                                                </Link>
                                                ))}
                                            </motion.div>
                                            )}
                                        </AnimatePresence>
                                    </div>))
                                }
                            </div>
                        </li>
                        :<li onClick={()=>setIsOpen(false)}>
                            <NavLink key={index} to={item.link} className="nav-item items-center  flex gap-0.5">
                                {item.name}
                            </NavLink>
                        </li>
                    ))}
                    <li>
                        <button className="btn !py-2 lg:!py-3 !text-xs md:!text-sm">BOOK AN APPOINTMENT</button>
                    </li>
                </ul> 
            </div>
        </div>
        {openServices &&<div onMouseLeave={()=>setOpenServices(false)} onMouseEnter={()=>setOpenServices(true)}
                             className=" hidden sp:flex fixed top-[80px] md:top-[100px] left-0 right-0 bg-[#f7f7f7] !py-4 container-layout" >
                                <div className="grid grid-cols-4 gap-5">
                                    <div className="hidden lg:flex lg:col-span-1">
                                        <AnimatePresence mode="popLayout">
                                            <motion.div
                                            key={dataIndex} 
                                            initial={{ opacity: 0 }}
                                            animate={{ opacity: 1 }}
                                            exit={{ opacity: 0 }}
                                            transition={{ duration: 0.8, ease: "easeInOut" }}
                                            className=" gap-5 flex flex-col justify-center"
                                            >
                                                <motion.img
                                                    key={`${dataIndex}_before`}
                                                    src={data[dataIndex]}
                                                    alt="Before"
                                                    className="container-layout-border-img h-full w-full objrct-cover rounded object-cover w-full"
                                                    initial={{ opacity: 0 }}
                                                    animate={{ opacity: 1 }}
                                                    exit={{ opacity: 0 }}
                                                    transition={{ duration: 0.8 }}
                                                />
                                            </motion.div>
                                        </AnimatePresence>
                                        
                                    </div>
                                    <div className="col-span-4 lg:col-span-3 ">
                                        <div className="grid grid-cols-2 xs:grid-cols-3 gap-3">
                                            {
                                                categories.map((e,idx)=>(<div className="flex flex-col gap-2" key={`Root_Menu_${e.category}_${idx}`}>
                                                    <Link onClick={()=>setOpenServices(false)}  to={e.link}><h2 className="text-sm lg:text-lg font-bold border-b border-b-[1px] border-[var(--main)] text-[var(--main)] w-fit">{e.category}</h2></Link>
                                                    <div className="flex flex-col gap-1">
                                                        {e.services.map((child,i)=>(<div className="text-xs lg:text-sm capitalize" key={`Child_${child.hero.subLabel}_${i}`}>
                                                            <Link onClick={()=>setOpenServices(false)} to={`/${child.link}`} className="transition-text duration-200 hover:text-[var(--grey_1)] flex items-center gap-1 link-service">
                                                                <div className="w-[6px] h-[6px] rounded-full bg-[var(--main)] circle-service"></div>{child.hero.subLabel}
                                                            </Link>
                                                        </div>))}
                                                    </div>
                                                </div>))
                                            }

                                        </div>
                                    </div>
                                </div>
        </div>}
    </nav>
  )
}
export default Navbar